# Indicates that an Input Object is a OneOf Input Object (and thus requires
#                         exactly one of its field be provided)
directive @oneOf on INPUT_OBJECT

scalar DateTimeUtc

type Issue {
  owner: String!
  repo: String!
  number: Int!
  title: String!
  author: String!
  createdAt: DateTimeUtc!
  state: IssueState!
  assignees: [String!]!
}

type IssueConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [IssueEdge!]!

  # A list of nodes.
  nodes: [Issue!]!
}

# An edge in a connection.
type IssueEdge {
  # The item at the end of the edge
  node: Issue!

  # A cursor for use in pagination
  cursor: String!
}

type IssueStat {
  # The number of open issues.
  openIssueCount: Int!
}

input IssueStatFilter {
  # Filter by assignee.
  assignee: String

  # Filter by issue author.
  author: String

  # Filter by repository name.
  repo: String

  # Start of the creation datetime range. (inclusive)
  # Example format: "yyyy-MM-ddTHH:mm:ssZ"
  begin: DateTimeUtc

  # End of the creation datetime range. (exclusive)
  # Example format: "yyyy-MM-ddTHH:mm:ssZ"
  end: DateTimeUtc
}

scalar IssueState

# Information about pagination in a connection
type PageInfo {
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type PullRequest {
  owner: String!
  repo: String!
  number: Int!
  title: String!
  assignees: [String!]!
  reviewers: [String!]!
}

type PullRequestConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PullRequestEdge!]!

  # A list of nodes.
  nodes: [PullRequest!]!
}

# An edge in a connection.
type PullRequestEdge {
  # The item at the end of the edge
  node: PullRequest!

  # A cursor for use in pagination
  cursor: String!
}

# A set of queries defined in the schema.
#
# This is exposed only for [`Schema`], and not used directly.
type Query {
  issues(after: String, before: String, first: Int, last: Int): IssueConnection!
  pullRequests(
    after: String
    before: String
    first: Int
    last: Int
  ): PullRequestConnection!
  issueStat(filter: IssueStatFilter!): IssueStat!
}
